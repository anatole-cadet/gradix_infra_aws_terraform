name: Gradix-Deployment
on: 
    push:
        branches: [ "stage", "production" ]
permissions: 
    id-token: write
    contents: read
jobs:
    Deployment_Gradix_stage:
        runs-on: ubuntu-latest
        environment: 
            name: ${{github.ref_name}}
        steps:
            - name: Checkout Repo
              uses: actions/checkout@v1
            - name: Configure AWS
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: ${{secrets.AWS_GITHUB_ACTION_ROLE}}
                aws-region: ${{vars.REGION}}
            - name: Configure Terraform
              uses: hashicorp/setup-terraform@v3.0.0
              with:
                terraform_wrapper: false
            - name: Create backend for statefile
              run: |
                cat > backend.tf << EOF 
                terraform {
                  backend "s3" {
                    bucket         = "${{vars.BUCKET_STAGE_STATE_FILE}}"
                    encrypt        = true
                    region         = "${{vars.REGION}}"
                    key            = "terraform.tfstate"
                    dynamodb_table = "gradix-dynamodb-state-locking"
                  }
                }
                EOF
            - name: Terraform Init
              id: init
              run: terraform init -var="environment=${{github.ref_name}}" -var="vpc_cidr_block=${{vars.VPC_CIDR_BLOCK}}" -var="region=${{ vars.REGION }}" -var="number_subnet=${{vars.NUMBER_SUBNET}}" -var="number_ec2_instance=${{vars.NUMBER_EC2_INSTANCE}}" -var="instance_type=${{vars.INSTANCE_TYPE}}" -var="ami=${{vars.AMI}}" 
            - name: Terraform Format
              id: format
              uses: dflook/terraform-fmt@v1
            - name: Terraform validate
              id: validate
              run: terraform validate
            - name: Terraform plan
              id: plan
              run: terraform plan -var="environment=${{github.ref_name}}" -var="vpc_cidr_block=${{vars.VPC_CIDR_BLOCK}}" -var="region=${{ vars.REGION }}" -var="number_subnet=${{vars.NUMBER_SUBNET}}" -var="number_ec2_instance=${{vars.NUMBER_EC2_INSTANCE}}" -var="instance_type=${{vars.INSTANCE_TYPE}}" -var="ami=${{vars.AMI}}" 
            - name: Terraform apply
              id: apply
            - name: Wainting before to destroy 
              run: sleep 30s
              shell: bash
            - name: Destroy gradix resources
              run: terraform destroy -f -var="environment=${{github.ref_name}}" -var="vpc_cidr_block=${{vars.VPC_CIDR_BLOCK}}" -var="region=${{ vars.REGION }}" -var="number_subnet=${{vars.NUMBER_SUBNET}}" -var="number_ec2_instance=${{vars.NUMBER_EC2_INSTANCE}}" -var="instance_type=${{vars.INSTANCE_TYPE}}" -var="ami=${{vars.AMI}}" 
 
